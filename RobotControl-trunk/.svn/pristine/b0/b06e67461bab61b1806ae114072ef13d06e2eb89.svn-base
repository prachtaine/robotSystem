using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Messaging;
using GalaSoft.MvvmLight.Command;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RobotControl;
using System.Xml.Serialization;
using System.Collections.ObjectModel;
using System.IO;
namespace RobotApp.ViewModel
{
    public class ControllerConfigurationViewModel : ViewModelBase
    {
        public RelayCommand DetectControllerCommand { get; set; }

        public MainViewModel MainViewModel { get { return MainViewModel.Instance; } }

        /// <summary>
        /// Collection of view models for the Joints
        /// </summary>
        public ObservableCollection<ControllerViewModel> Controllers { get; set; }

        public ControllerConfigurationViewModel()
        {
            Controllers = new ObservableCollection<ControllerViewModel>();

            Messenger.Default.Register<Messages.ControllerAdded>(this,
                (message) =>
                {
                    bool found = false;
                    foreach(var cvm in Controllers)
                    {
                        if (cvm.Controller.Id == message.AddedController.Id)
                            found = true;

                    }
                    if(!found)
                        Controllers.Add(new ControllerViewModel(message.AddedController));
                }
                );

            Messenger.Default.Register<Messages.RemoveController>(this,
               (message) =>
               {
                   Controllers.Remove(message.ControllerToRemove);
               }
               );

            DetectControllerCommand = new RelayCommand(
                () =>
                    {
                        MainViewModel.ScanForControllers();
                    },
                () =>
                    {
                        if (MainViewModel.Robot == null)
                            return false;
                        if (MainViewModel.Robot.Com == null)
                            return false;
                        return true;
                    }
                );

            MainViewModel.Robot.PropertyChanged += Robot_PropertyChanged;
        }


        private RelayCommand saveCommand;

        /// <summary>
        /// Gets the SaveCommand.
        /// </summary>
        public RelayCommand SaveCommand
        {
            get
            {
                return saveCommand
                    ?? (saveCommand = new RelayCommand(
                    () =>
                    {
                        if (!SaveCommand.CanExecute(null))
                        {
                            return;
                        }

                        XmlSerializer ser = new XmlSerializer(typeof(ObservableCollection<ControllerViewModel>));
                        FileStream writer = new FileStream("data.ControllerConfig", FileMode.Truncate);
                        ser.Serialize(writer, Controllers);
                        writer.Close();

                    },
                    () => true));
            }
        }


        private RelayCommand loadCommand;

        /// <summary>
        /// Gets the LoadCommand.
        /// </summary>
        public RelayCommand LoadCommand
        {
            get
            {
                return loadCommand
                    ?? (loadCommand = new RelayCommand(
                    () =>
                    {
                        if (!LoadCommand.CanExecute(null))
                        {
                            return;
                        }

                        XmlSerializer ser = new XmlSerializer(typeof(ObservableCollection<ControllerViewModel>));
                        FileStream reader = new FileStream("data.ControllerConfig", FileMode.Open);
                        Controllers = (ObservableCollection<ControllerViewModel>)ser.Deserialize(reader);
                        foreach(var controllerVm in Controllers)
                        {
                            // In the future, ControllerViewModel should have a Robot property that propogates to its controllers and motors
                            controllerVm.Controller.Robot = MainViewModel.Robot;
                            foreach(var motor in controllerVm.Motors)
                            {
                                motor.Controller = controllerVm.Controller;
                                motor.Controller.Robot = MainViewModel.Robot;
                                motor.Motor.UpdateConfiguration();
                            }
                            
                        }
                        RaisePropertyChanged("Controllers");

                    },
                    () => true));
            }
        }

        void Robot_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            DetectControllerCommand.RaiseCanExecuteChanged();
        }

    }
}
