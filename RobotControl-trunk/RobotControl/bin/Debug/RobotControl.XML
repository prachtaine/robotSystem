<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RobotControl</name>
    </assembly>
    <members>
        <member name="T:RobotControl.IPacketTransport">
            <summary>
            This interface describes a generic packet transport to the 
            individual motor control boards. This allows protocol-agonstic communication
            over serial, TCP/IP, USB HID, RF, or any other communication interface that
            can be modeled as a packet device
            </summary>
        </member>
        <member name="M:RobotControl.IPacketTransport.Send(System.Byte[])">
            <summary>
            Send data through the transport. Before sending, this should open the 
            communications channel if not already open.
            </summary>
            <param name="data">Data to send</param>
        </member>
        <member name="P:RobotControl.IPacketTransport.IsOpen">
            <summary>
            Gets or sets a value indicating whether the transport is open and able 
            to send data. This should be ideompotent! 
            </summary>
        </member>
        <member name="E:RobotControl.IPacketTransport.DataReceived">
            <summary>
            This event occurs whenever data is received from the communication transport.
            </summary>
        </member>
        <member name="M:RobotControl.Controller.ParseResponse(System.Byte[])">
            <summary>
            Call this function with any response data (including the address data) that's received from this joint.
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:RobotControl.Controller.Robot">
            <summary>
            The <see cref="P:RobotControl.Controller.Robot"/> this joint belongs to
            </summary>
        </member>
        <member name="T:RobotControl.Motor">
            <summary>
            This is the main class for interacting with particular motors that are located inside a joint.
            </summary>
            <remarks>
            <para>
            There are two control modes that a motor can operate in -- <see cref="P:RobotControl.Motor.ControlMode"/>.Potentiometer and <see cref="P:RobotControl.Motor.ControlMode"/>.RelativeStep.
            </para>
            <para>
            In Potentiometer mode, the potentiometer attached to the joint is used to gauge the joint position. The potentiometer can be calibrated by setting
            <see cref="P:RobotControl.Motor.MinAngle"/> and <see cref="!:MaxAngle"/> to their appropriate values. No homing is required for this method.
            </para>
            <para>
            In RelativeStep mode, the motor shaft's Hall effect sensors are used to keep track of the shaft position by counting each click from the sensor.
            Generally, there is one click per shaft revolution (this excludes the gearbox that's almost always attached to motor). 
            <see cref="P:RobotControl.Motor.MinAngle"/> and <see cref="!:MaxAngle"/> are used to set the minimum and maximum angle of the joint, while <see cref="!:MinStepCount"/> and
            <see cref="!:MaxStepCount"/> are used to set the minimum and maximum step counts that correspond to the minimum and maximum angles mentioned previously.
            </para>
            <para>
            Since the Hall effect sensors produce relative step counts only, it is necessary to initialize the current shaft position to an accurate value
            based on the actual angle of the joint. This is known as "Homing" and can be done automatically using limit switches, or manually, by associating 
            the current shaft position with a measured angle of the joint.
            </para>
            <para>
            To use automated homing, set <see cref="P:RobotControl.Motor.HomingSource"/> to either <see cref="P:RobotControl.Motor.HomingSource"/>.MinLimitSwitch or <see cref="P:RobotControl.Motor.HomingSource"/>.MaxLimitSwitch
            and execute <see cref="!:Home"/>. This will slowly move the joint toward either minimum or maximum value, and once the limit switch is pressed, both the joint
            angle and the current position counter will be updated to their correct values.
            </para>
            </remarks>
        </member>
        <member name="M:RobotControl.Motor.CalibrateOffsetAngle(System.Double)">
            <summary>
            Allows the user to manually identify the angle associated with the current position of the motor.
            </summary>
            <param name="angle"></param>
            <remarks>
            <para>
            This method works regardless of the current control method. In Relative step count control, this method zeros the
            internal step counter and maps the angle offset to this value.
            </para>
            <para>
            In potentiometer control, this method sets the potentiometer offset angle.
            </para>
            </remarks>
        </member>
        <member name="P:RobotControl.Motor.ControlMode">
            <summary>
            Gets or sets a value that determines if the motor's joint position is controlled using an external potentiometer attached to the control board or
            the Hall effect sensors built-in to the motor shaft. 
            </summary>
        </member>
        <member name="P:RobotControl.Motor.HomingSource">
            <summary>
            Gets or sets a value that determines the homing source (if any) for use in RelativeStep homing.
            </summary>
        </member>
        <member name="P:RobotControl.Motor.Index">
            <summary>
            The index of the motor.
            </summary>
            <remarks>
            This is used to direct commands and configuration parameters to the correct motor attached to the joint. The current-generation board
            supports two motors with index values 0 and 1, though future boards may have more or fewer motors supported.
            </remarks>
        </member>
        <member name="P:RobotControl.Motor.MinAngle">
            <summary>
            Gets or sets the minimum angle of the joint for this motor, in degrees;
            </summary>
            <remarks>
            <para>
            This is measured relative to the potentiometer and helps establish the coordinate frame of the robot.
            </para>
            <para>
            This property answers the question "When the potentiometer of the joint measures its minimum value (0 volts), what angle is the joint at?"
            </para>
            </remarks>
        </member>
        <member name="P:RobotControl.Motor.EncoderClicksPerRevolution">
            <summary>
            Gets or sets a value associated with the number of encoder signals that 
            corresponds with one revolution of the output shaft.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ObservableDictionary`2">
            <summary>
            Implementation of a dynamic data collection based on generic dictionary implementing INotifyCollectionChanged to 
            notify listeners when items get added, removed, or the whole dictionary is refreshed.
            </summary>
            <typeparam name="TKey">The type of the keys</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <remarks>
            <para>
            ObservableOrderedDictionary provides an ObservableCollection-style interface with a Dictionary backend. 
            Unlike the regular Dictionary&lt;TKey, TValue&gt;, ObservableDictionary preserves element order.
            </para>
            <example>
            <para>
            This class is especially useful for storing arrays of data and ViewModels in a WPF data binding scenario
            when the application still needs immediate access to specific references.
            </para>
            <para>
            Consider the Geomagic Touch plug-in, which has several signal sources that all need a view model. With the ObservableCollection
            approach, the app would need specific references for each of those signal sources.
            </para>
            <code>
            SignalSourceViewModel X = new SignalSourceViewModel("X Position");
            SignalSourceViewModel Y = new SignalSourceViewModel("Y Position");
            SignalSourceViewModel Z = new SignalSourceViewModel("Z Position");
            ...
            
            ObservableCollection&lt;SignalSourceViewModel&gt; SignalSources = new ObservableCollection&lt;SignalSourceViewModel&gt;();
            
            ...
            X.SendValue(device.X);
            ...
            </code>
            <para>
            With ObservableDictionary, no variables need to be created to store local references:
            </para>
            <code>
            SignalSources = new ObservableDictionary&lt;string, SignalSourceViewModel&gt;();
            
            SignalSources.Add("X", new SignalSourceViewModel("X Position"));
            SignalSources.Add("Y", new SignalSourceViewModel("Y Position"));
            SignalSources.Add("Z", new SignalSourceViewModel("Z Position"));
            ...
            
            SignalSources["X"].SendValue(device.X);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ObservableDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event  />).
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ObservableDictionary`2.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ObservableConcurrentDictionary`2">
            <summary>
            Provides a thread-safe dictionary for use with data binding.
            </summary>
            <typeparam name="TKey">Specifies the type of the keys in this collection.</typeparam>
            <typeparam name="TValue">Specifies the type of the values in this collection.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.#ctor">
            <summary>
            Initializes an instance of the ObservableConcurrentDictionary class.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.NotifyObserversOfChange">
            <summary>
            Notifies observers of CollectionChanged or PropertyChanged of an update to the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.TryAddWithNotification(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Attempts to add an item to the dictionary, notifying observers of any changes.</summary>
            <param name="item">The item to be added.</param>
            <returns>Whether the add was successful.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.TryAddWithNotification(`0,`1)">
            <summary>Attempts to add an item to the dictionary, notifying observers of any changes.</summary>
            <param name="key">The key of the item to be added.</param>
            <param name="value">The value of the item to be added.</param>
            <returns>Whether the add was successful.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.TryRemoveWithNotification(`0,`1@)">
            <summary>Attempts to remove an item from the dictionary, notifying observers of any changes.</summary>
            <param name="key">The key of the item to be removed.</param>
            <param name="value">The value of the item removed.</param>
            <returns>Whether the removal was successful.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.UpdateWithNotification(`0,`1)">
            <summary>Attempts to add or update an item in the dictionary, notifying observers of any changes.</summary>
            <param name="key">The key of the item to be updated.</param>
            <param name="value">The new value to set for the item.</param>
            <returns>Whether the update was successful.</returns>
        </member>
        <member name="E:System.Collections.Concurrent.ObservableConcurrentDictionary`2.CollectionChanged">
            <summary>Event raised when the collection changes.</summary>
        </member>
        <member name="E:System.Collections.Concurrent.ObservableConcurrentDictionary`2.PropertyChanged">
            <summary>Event raised when a property on the collection changes.</summary>
        </member>
        <member name="M:RobotControl.Robot.DiscoverControllers">
            <summary>
            This command discovers all the joints
            </summary>
            <param name="numJoints">The number of joints to wait for before quitting</param>
        </member>
        <member name="T:RobotControl.SerialPortPacketTransport">
            <summary>
            This class is used for direct communication with the robot motor drivers using RS485 instantiated on this computer as a COM port.
            </summary>
        </member>
        <member name="M:RobotControl.SerialPortPacketTransport.#ctor(System.IO.Ports.SerialPort)">
            <summary>
            Initializes a new instance with the given com port.
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:RobotControl.SerialPortPacketTransport.Send(System.Byte[])">
            <summary>
            Send the data to the robot.
            </summary>
            <param name="data">The data to send to the robot</param>
            <remarks>
            <para>
            This function will attempt to open the serial port if not already open. It will throw an exception if 
            data couldn't be sent. 
            </para>
            <para>
            The data packet will be preceeded by the DABAD000 sync word, and will be padded to fill the 32-byte 
            packet length defined by the protocol.
            </para>
            </remarks>
        </member>
        <member name="P:RobotControl.SerialPortPacketTransport.Port">
            <summary>
            The serial port to use
            </summary>
        </member>
        <member name="P:RobotControl.SerialPortPacketTransport.IsOpen">
            <summary>
            Gets or sets the state of the communication channel.
            </summary>
        </member>
    </members>
</doc>
